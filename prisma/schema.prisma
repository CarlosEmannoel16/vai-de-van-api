// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusPayment {
  EM_ANDAMENTO
  CONFIRMADO
  CANCELADO
}

enum StatusTravel {
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
  DESABILITADA
  ABERTA
}

enum StatusTicket {
  USADO
  CANCELADO
  EXPIRADO
  ATIVO
}

model CodeEmail {
  id         String   @id @default(uuid())
  code       String
  email      String
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  hasAccount    Boolean  @default(false)
  password      String?
  email         String   @unique
  cpf           String   @unique
  phone         String
  phone2        String   @default("")
  date_of_birth DateTime
  emailConfirm  Boolean  @default(false)
  Ticket        Ticket[]
  created_at    DateTime @default(now())
  update_at     DateTime @default(now()) @updatedAt
}

model Driver {
  id                String   @id @default(uuid())
  name              String
  password          String
  email             String   @unique
  cpf               String   @unique
  phone             String
  date_of_birth     DateTime
  cnh               String
  cnhDateOfIssue    DateTime @default(now())
  cnhExpirationDate DateTime @default(now())
  Travel            Travel[]
  created_at        DateTime @default(now())
  update_at         DateTime @default(now()) @updatedAt
}

model User {
  id            String    @id @default(uuid())
  name          String
  password      String
  email         String    @unique
  cpf           String    @unique
  phone         String
  date_of_birth DateTime?
  created_at    DateTime  @default(now())
  update_at     DateTime  @default(now()) @updatedAt
}

model SessionUsers {
  idUser String @id
  token  String
}

model State {
  id         String   @id @default(uuid())
  name       String
  uf         String
  stops      Stop[]
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
}

model Stop {
  id          String      @id @default(uuid())
  name        String
  image       String      @default("")
  disabled    Boolean     @default(false)
  coordinates String
  State       State?      @relation(fields: [stateId], references: [id])
  stateId     String?
  created_at  DateTime    @default(now())
  update_at   DateTime    @default(now()) @updatedAt
  TripStops   TripStops[] @relation("StopDestiny")
  Views       Views[]
}

model Route {
  id         String      @id @default(uuid())
  name       String      @unique
  km         Int
  disabled   Boolean     @default(false)
  kmValue    String?
  created_at DateTime    @default(now())
  update_at  DateTime    @default(now()) @updatedAt
  Travel     Travel[]
  TripStops  TripStops[]
}

model TripStops {
  id                   String   @id @default(uuid())
  initialStop          Boolean  @default(false)
  finalStop            Boolean  @default(false)
  stopId               String
  tripStopOrder        Int
  distanceFromLastStop Float    @default(0)
  routeId              String?
  created_at           DateTime @default(now())
  update_at            DateTime @default(now()) @updatedAt
  Route                Route?   @relation(fields: [routeId], references: [id])
  TicketOrigin         Ticket[] @relation("TripStopOrigin")
  TicketDestiny        Ticket[] @relation("TripStopDestiny")
  Stop                 Stop     @relation(fields: [stopId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "StopDestiny")
}

model Vehicle {
  id                String   @id @default(uuid())
  amount_of_accents Int
  description       String
  plate             String
  with_air          Boolean
  Travel            Travel[]
  cor               String
  created_at        DateTime @default(now())
  update_at         DateTime @default(now()) @updatedAt
  ownerName         String
}

model Travel {
  id            String       @id @default(uuid())
  description   String       @default("Viagem Padrao")
  idVehicle     String
  routeId       String
  driverId      String?      @default("60fa4c20-e4e0-4419-9cde-fea353a457ab")
  departureDate DateTime
  arrivalDate   DateTime
  status        StatusTravel @default(ABERTA)
  isDailyTrip   Boolean      @default(false)
  created_at    DateTime     @default(now())
  update_at     DateTime     @default(now()) @updatedAt
  Driver        Driver?      @relation(fields: [driverId], references: [id])
  Payment       Payment[]
  Tickets       Ticket[]
  Vehicle       Vehicle      @relation(fields: [idVehicle], references: [id])
  Route         Route        @relation(fields: [routeId], references: [id])
}

model Payment {
  id         String        @id @unique
  Travel     Travel        @relation(fields: [travelId], references: [id])
  status     StatusPayment
  Ticket     Ticket[]
  travelId   String
  created_at DateTime      @default(now())
  update_at  DateTime      @default(now()) @updatedAt
}

model Ticket {
  id              String       @id @default(uuid())
  amount          Float
  Customer        Customer     @relation(fields: [custumerId], references: [id])
  status          StatusTicket
  Payment         Payment?     @relation(fields: [paymentId], references: [id])
  paymentId       String?
  created_at      DateTime     @default(now())
  update_at       DateTime     @default(now()) @updatedAt
  custumerId      String
  originId        String       @map("TripStopOrigin")
  destinyId       String       @map("TripStopDestiny")
  TripStopOrigin  TripStops    @relation(fields: [originId], references: [id], name: "TripStopOrigin")
  TripStopDestiny TripStops    @relation(fields: [destinyId], references: [id], name: "TripStopDestiny")
  Travel          Travel       @relation(fields: [travelId], references: [id])
  travelId        String
}

model ViewsCategory {
  id         String   @id @default(uuid())
  name       String
  disabled   Boolean  @default(false)
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
  Views      Views[]
}

model Views {
  id              String        @id @default(uuid())
  name            String
  urlImage        String
  viewsCategoryId String
  stopId          String
  Stop            Stop          @relation(fields: [stopId], references: [id])
  category        ViewsCategory @relation(fields: [viewsCategoryId], references: [id])
  disabled        Boolean       @default(false)
  created_at      DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
}
